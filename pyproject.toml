#########################
# General Configuration #
#########################

# Build

[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

# Versioning

[tool.hatch.version]
source = "vcs"

[tool.hatch.version.raw-options]
local_scheme = "no-local-version"
version_scheme = "python-simplified-semver"

# Publishing

[tool.hatch.publish.index]
disable = true

# Tests

[tool.pytest.ini_options]
pythonpath = "src"
addopts = "--color=yes"
log_cli = 1

[tool.hatch.envs.test]
features = ["html", "email", "test"]

[tool.hatch.envs.test.scripts]
test = 'pytest --cov=hdx --no-cov-on-fail --junitxml=.tox/test-results.xml --cov-report=xml --cov-report=term-missing'

[[tool.hatch.envs.test.matrix]]
python = ["3.11"]

[tool.hatch.envs.lint]
detached = true
dependencies = [
  "black",
  "ruff",
]

[tool.hatch.envs.lint.scripts]
style = [
  "ruff --config .config/ruff.toml {args:.}",
  "black --config .config/black.toml --check --diff {args:.}",
]
# Not used for anything at the moment
fmt = [
  "black --config .config/black.toml {args:.}",
  "ruff --config .config/ruff.toml --fix {args:.}",
]

[tool.coverage.report]
omit = [
    "*/setup.py",
    "*/python?.?/*",
    "*/venv/*",
    "*/site-packages/*",
    "*/tests/*",
    "*__init__*"
]
exclude_lines = [
    "pragma: no cover",  # Have to re-enable the standard pragma
    "def __repr__",  # Don't complain about missing
    "if self.debug",  # debug-only code
    "raise AssertionError",  # Don't complain if tests don't hit
    "raise NotImplementedError",  # defensive assertion code
    "if 0:",  # Don't complain if non-runnable code
    "if __name__ == .__main__.:"  # isn't run
]

#########################
# Project Configuration #
#########################

# Project

[project]
name = "hdx-python-utilities"
description = "HDX Python Utilities for streaming tabular data, date and time handling and other helpful functions"
authors = [{name = "Michael Rans", email = "rans@email.com"}]
license = {text = "MIT"}
keywords = ["HDX", "utilities", "library", "streaming", "tabular data", "datetime", "date", "time", "timezone", "dict",
    "list", "json", "yaml"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: POSIX :: Linux",
    "Operating System :: Unix",
    "Operating System :: MacOS",
    "Operating System :: Microsoft :: Windows",
]
requires-python = ">=3.8"
# Extras for frictionless[excel,json] added explicitly
# for conda-forge compatibility
dependencies = [
    "frictionless>=5.10.1",
    # frictionless[excel]
    "openpyxl>=3.0",
    "tableschema-to-template>=0.0.13",
    "xlrd>=1.2",
    "xlwt>=1.2",
    # frictionless[json]
    "ijson>=3.0",
    "jsonlines>=1.2",
    # /end frictionless extras
    "loguru",
    "python-dateutil==2.8.2",
    "ratelimit",
    "requests-file",
    "ruamel.yaml",
]
dynamic = ["version"]

[project.readme]
file = "README.md"
content-type = "text/markdown"

[project.urls]
Homepage = "https://github.com/OCHA-DAP/hdx-python-utilities"

[project.optional-dependencies]
html = ["beautifulsoup4", "html5lib"]
email = ["email_validator"]
test = ["pytest", "pytest-cov", "pytest-loguru"]
dev = ["pre-commit"]

# Build

[tool.hatch.build.targets.wheel]
packages = ["src/hdx"]

[tool.hatch.build.hooks.vcs]
version-file = "src/hdx/utilities/_version.py"

# Tests

[tool.coverage.paths]
source = ["src/hdx", "*/site-packages/hdx"]

# Pydoc Markdown - will be moved

[[tool.pydoc-markdown.loaders]]
type = "python"
search_path = ["src"]
packages = ["hdx.utilities"]

[tool.pydoc-markdown.renderer]
type = "mkdocs"
output_directory = "docs"

    [tool.pydoc-markdown.renderer.mkdocs_config]
    site_name = "HDX Python Utilities"
    theme = "readthedocs"
    repo_url = "https://github.com/OCHA-DAP/hdx-python-utilities"

    [tool.pydoc-markdown.renderer.markdown.source_linker]
    type = "github"
    repo = "OCHA-DAP/hdx-python-utilities"

    [[tool.pydoc-markdown.renderer.pages]]
    title = "Home"
    name = "index"
    source ="doc/main.md"

    [[tool.pydoc-markdown.renderer.pages]]
    title = "API Documentation"

        [[tool.pydoc-markdown.renderer.pages.children]]
        title = "Downloading files"
        contents = ["hdx.utilities.downloader.*"]

        [[tool.pydoc-markdown.renderer.pages.children]]
        title = "Retrieving files"
        contents = ["hdx.utilities.retriever.*"]

        [[tool.pydoc-markdown.renderer.pages.children]]
        title = "Loading and saving JSON and YAML"
        contents = ["hdx.utilities.loader.*", "hdx.utilities.saver.*"]

        [[tool.pydoc-markdown.renderer.pages.children]]
        title = "Dictionary and list utilities"
        contents = ["hdx.utilities.dictandlist.*"]

        [[tool.pydoc-markdown.renderer.pages.children]]
        title = "HTML utilities"
        contents = ["hdx.utilities.html.*"]

        [[tool.pydoc-markdown.renderer.pages.children]]
        title = "Comparing files"
        contents = ["hdx.utilities.compare.*"]

        [[tool.pydoc-markdown.renderer.pages.children]]
        title = "Emailing"
        contents = ["hdx.utilities.email.*"]

        [[tool.pydoc-markdown.renderer.pages.children]]
        title = "Configuring logging"
        contents = ["hdx.utilities.easy_logging.*"]

        [[tool.pydoc-markdown.renderer.pages.children]]
        title = "Path utilities"
        contents = ["hdx.utilities.path.*"]

        [[tool.pydoc-markdown.renderer.pages.children]]
        title = "Date parsing utilities"
        contents = ["hdx.utilities.dateparse.*"]

        [[tool.pydoc-markdown.renderer.pages.children]]
        title = "Text processing"
        contents = ["hdx.utilities.text.*"]

        [[tool.pydoc-markdown.renderer.pages.children]]
        title = "Encoding utilities"
        contents = ["hdx.utilities.encoding.*"]

        [[tool.pydoc-markdown.renderer.pages.children]]
        title = "Valid UUID"
        contents = ["hdx.utilities.uuid.*"]

        [[tool.pydoc-markdown.renderer.pages.children]]
        title = "Wheel utilities"
        contents = ["hdx.utilities.session.*"]

        [[tool.pydoc-markdown.renderer.pages.children]]
        title = "Retrying Requests session"
        contents = ["hdx.utilities.session.*"]

        [[tool.pydoc-markdown.renderer.pages.children]]
        title = "User Agent"
        contents = ["hdx.utilities.useragent.*"]
